Jobs profiles:

1. API Gateways & Management: Azure APIM, AWS API Gateway, Nginx, Envoy, Apigee.
AuthN/AuthZ: Oauth2, OIDC, JWT, SAML, SSO, mTLS & Certificate management.
Cluster Technologies & Monitoring: Kubernetes, Docker, CRD authoring, Consul,Traefik Service Mesh,Istio Envoy,Prometheus,Datadog,Grafana,Loki Tempo.
IaC: Terraform Ansible CloudFormation ARM.
DevOps: GitOps Argo Jenkins.
Developer Tooling: SDK authoring API design.


2. Airflow/Pandas, API, Flask, EKS (parallel)

-You have a list of students and you need to create a new group containing all of them. However, to avoid confusion you want all of these students to have pairwise distinct surnames. Your task is to check whether this is true or not.
-To obtain the list of the students and information about them, you can use 2 API endpoints:
Use a GET request for the /studentList endpoint to receive the list of students from which you want to create the new group. As a response you will get a JSON object in the following format:
{
    "n": <int>,
    "m": <int>,
    "ids": [<int>, <int>, ..., <int>]
}
-Here, m stands for the number of students, ids is a JSON array containing student ids, and n is an upper bound for student id values: each id in the ids array will be in the range [0, n). It is guaranteed that the ids elements are pairwise distinct.
-Use a GET request for the /student endpoint to retrieve information about one student. To retrieve information about the student with id equal to id, send a GET request to /student?student_id=id. As a response you will get a JSON object in the following format:
Error case
-If the specified id is not in range [0, n), you will receive
-{"message": "Error: id is not in range [0, n)"}
-If the specified id is invalid, you will receive
-{"message": "Error: Invalid input"}
Normal case
{
    "id": <int>,
    "name": <string>,
    "surname": <string>,
    "gpa": <float>,
    "scholarship": <bool>
}
-Here id stands for the student id, name stands for the student's name, surname for the student's surname, gpa - for grade point average, and scholarship - if the student has a scholarship.
-As the answers for this task, return "The class can be divided" if it is possible to create a new group of the provided list of students, i.e. they have pairwise distinct surnames. Otherwise, return "The class cannot be divided". It is guaranteed that there are no more than 50 students in the class.
-API credentials
-API endpoint for the GET request for information about the class http://localhost/studentList
-API endpoint for the GET request for information about students http://localhost/student.
-Query for items should be in the format: http://localhost/student?student_id=id.
-Note: if you are solving this task in JavaScript, use the request module for HTTP calls.
-Note: if you are solving this task in C#, use the WebClient module for HTTP calls.
-Assume that you receive the following responses for the endpoints described above:
-http://localhost/studentList:
{
    "n": 5,
    "m": 3,
    "ids": [0, 1, 4]
}
http://localhost/student?student_id=0:
{
    "id": 0,
    "name": "James",
    "surname": "Bond",
    "gpa": 4.0,
    "scholarship": true
}
http://localhost/student?student_id=1:
{
    "id": 1,
    "name": "Akihiko",
    "surname": "Honda",
    "gpa": 3.5,
    "scholarship": true
}
http://localhost/student?student_id=4:
{
    "id": 4,
    "name": "James",
    "surname": "Jones",
    "gpa": 3.0,
    "scholarship": false
}
http://localhost/student?student_id=5:
{
    "message": "Error: id is not in range [0, n)"
}
http://localhost/student?student_id=a:
{
    "message": "Error: Invalid input"
}
-"The class can be divided" should be printed to the standard output stream, because all surnames occur only once: "Bond", "Honda", and "Jones".
-[execution time limit] 10 seconds (py3)
-[memory limit] 1 GB
# import requests
# import mysql.connector
# import pandas as pd
print('Hello')
def solution () {
    
    # student_list_ids = .get(/studentList).ids;
    # 
     
    
    
}
TESTS
Test 1
Input
Console Output
Error Output
View the setup script
Test 2
Test 3
Test 4
Test 5
Test 6


3.
 Proficiency in Java and strong knowledge of the Spring framework.
· Familiarity with Spring Boot, Hibernate, Maven or Gradle.
· Solid foundation of knowledge in Python that can be further developed if needed.
· Experience working with CI/CD pipeline.
· Experience with observability tools like DataDog or similar, to monitor and troubleshoot application performance (highly desirable).
· Experience in defining and building REST API specifications.
· Bonus skills: Familiarity with AWS, Docker and Kubernetes.
· Strong professional English communication skills.


4.Requirements:
At least 5 years of hands-on experience in most of these ML tools/techniques:
Building  ML models with SageMaker or a similar service;
Building ML models in frameworks like TensorFlow & PyTorch and deploying them in SageMaker;
Training and deploying AWS pre-trained AI services and foundational models;
Usage Elasticsearch power search functionality and provide insights from large datasets;
Integrating ML models into real-time applications and batching workflows recommends better infrastructure design and optimization;
Monitoring, evaluating, and continuously improving model performance and automating these tasks using one or more tools for MLOps.
Hands-on experience with these data engineering tools/techniques:
Data integration, cleansing, transformation, and visualization using Python packages, SQL, etc.;
AWS services include Glue, EMR, Athena, DynamoDB, Step Functions, EKS, etc.





